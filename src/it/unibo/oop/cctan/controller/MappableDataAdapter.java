package it.unibo.oop.cctan.controller;

import java.awt.Color;
import java.util.List;
import java.util.stream.Collectors;

import it.unibo.oop.cctan.interpackage_comunication.data.MappableData;
import it.unibo.oop.cctan.interpackage_comunication.data.MappableDataImpl;
import it.unibo.oop.cctan.model.Model;

/**
 * A class created to adapt data generated by model to data accepted by view. 
 * This class is package protected.
 */
class MappableDataAdapter {

    private final Model model;

    /**
     * The constructor. Needs a model class.
     * 
     * @param model
     *            The class that implements model
     */
    MappableDataAdapter(final Model model) {
        this.model = model;
    }

    /**
     * Return the list of the data that has to be drawn on screen.
     * 
     * @return The data
     */
    protected List<MappableData> getListOfMappableData() {
        // Add all the bullets to the list of mappable data
        final List<MappableData> l = model.getBulletAgents()
                                          .stream()
                                          .filter(ba -> ba != null)
                                          .map(ba -> new MappableDataImpl("", 
                                                                          ba.getColor(), 
                                                                          ba.getShape()))
                                          .collect(Collectors.toList());

        // Add all the squares to the list of mappable data
        l.addAll(model.getSquareAgents()
                      .stream()
                      .filter(sa -> sa != null)
                      .map(sa -> new MappableDataImpl(Integer.toString(sa.getHP()), 
                                                      sa.getColor(), 
                                                      sa.getShape()))
                      .collect(Collectors.toList()));

        // Add all the powerup to the list of mappable data
        l.addAll(model.getPowerUpBlocks()
                      .stream()
                      .filter(pu -> pu != null)
                      .map(pu -> new MappableDataImpl(pu.getSymbol() + " " + pu.getHP(), 
                                                      pu.getColor(), 
                                                      pu.getShape()))
                      .collect(Collectors.toList()));

        // Add shuttle to the list of mappable data
        l.add(0, new MappableDataImpl("", 
                                      Color.WHITE, 
                                      model.getShuttle().getShape()));

        return l;
    }

}
